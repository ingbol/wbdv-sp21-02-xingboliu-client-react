{"ast":null,"code":"var _jsxFileName = \"/Users/liuxingbo/webdev/2021/spring/02/wbdv-sp21-02-xingboliu-client-react/src/components/quiz/question/multiple-choice-question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MultipleChoiceQuestion = ({\n  question\n}) => {\n  _s();\n\n  const [selectedAnswer, setSelectedAnswer] = useState([]);\n  const [graded, setGraded] = useState(false);\n\n  const getBackgroundColor = choice => {\n    if (choice === question.correct) {\n      return \"list-group-item-success\";\n    } else if (choice === selectedAnswer) {\n      return \"list-group-item-danger\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const getIcon = choice => {\n    if (choice === question.correct) {\n      return \"fas fa-check\";\n    } else if (choice === selectedAnswer) {\n      return \"fas fa-times\";\n    } else {\n      return \"\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [question.title, graded === true && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: `float-right ${selectedAnswer === question.correct ? 'fas fa-check bg-danger' : 'fas fa-times'}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: question.choices.map(choice => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `list-group-item ${graded === true ? getBackgroundColor(choice) : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: question._id,\n              value: choice,\n              onClick: () => {\n                if (graded === false) {\n                  setSelectedAnswer(choice);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 36\n            }, this), choice]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this), graded === true && /*#__PURE__*/_jsxDEV(\"i\", {\n            className: `float-right ${getIcon(choice)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your answer: \", selectedAnswer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success\",\n      onClick: () => {\n        setGraded(true);\n      },\n      children: \"Grade\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MultipleChoiceQuestion, \"5vUkRD3tq0ZRC+XVJaJv4rjiWGo=\");\n\n_c = MultipleChoiceQuestion;\nexport default MultipleChoiceQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleChoiceQuestion\");","map":{"version":3,"sources":["/Users/liuxingbo/webdev/2021/spring/02/wbdv-sp21-02-xingboliu-client-react/src/components/quiz/question/multiple-choice-question.js"],"names":["React","useState","MultipleChoiceQuestion","question","selectedAnswer","setSelectedAnswer","graded","setGraded","getBackgroundColor","choice","correct","getIcon","title","choices","map","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;;;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAE3C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMO,kBAAkB,GAAIC,MAAD,IAAY;AACnC,QAAIA,MAAM,KAAKN,QAAQ,CAACO,OAAxB,EAAgC;AAC5B,aAAO,yBAAP;AACH,KAFD,MAEO,IAAID,MAAM,KAAKL,cAAf,EAA+B;AAClC,aAAO,wBAAP;AACH,KAFM,MAEA;AACH,aAAO,EAAP;AACH;AACJ,GARD;;AAUA,QAAMO,OAAO,GAAIF,MAAD,IAAY;AACxB,QAAIA,MAAM,KAAKN,QAAQ,CAACO,OAAxB,EAAgC;AAC5B,aAAO,cAAP;AACH,KAFD,MAEO,IAAID,MAAM,KAAKL,cAAf,EAA+B;AAClC,aAAO,cAAP;AACH,KAFM,MAEA;AACH,aAAO,EAAP;AACH;AACJ,GARD;;AAUA,sBACI;AAAA,4BACI;AAAA,iBACKD,QAAQ,CAACS,KADd,EAGQN,MAAM,KAAK,IAAX,iBACI;AAAG,QAAA,SAAS,EAAG,eAAcF,cAAc,KAAKD,QAAQ,CAACO,OAA5B,GAAqC,wBAArC,GAA+D,cAAe;AAA3G;AAAA;AAAA;AAAA;AAAA,cAJZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAEIP,QAAQ,CAACU,OAAT,CAAiBC,GAAjB,CAAsBL,MAAD,IAAY;AAC7B,4BACI;AAAI,UAAA,SAAS,EAAG,mBAAkBH,MAAM,KAAK,IAAX,GAAiBE,kBAAkB,CAACC,MAAD,CAAnC,GAA6C,EAAG,EAAlF;AAAA,kCACI;AAAA,oCAAO;AAAO,cAAA,IAAI,EAAC,OAAZ;AAAoB,cAAA,IAAI,EAAEN,QAAQ,CAACY,GAAnC;AAAwC,cAAA,KAAK,EAAEN,MAA/C;AAEO,cAAA,OAAO,EAAE,MAAM;AACb,oBAAIH,MAAM,KAAK,KAAf,EAAqB;AACjBD,kBAAAA,iBAAiB,CAACI,MAAD,CAAjB;AACH;AAChB;AANM;AAAA;AAAA;AAAA;AAAA,oBAAP,EAMKA,MANL;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EASQH,MAAM,KAAK,IAAX,iBAEA;AAAG,YAAA,SAAS,EAAG,eAAcK,OAAO,CAACF,MAAD,CAAS;AAA7C;AAAA;AAAA;AAAA;AAAA,kBAXR;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAkBH,OAnBD;AAFJ;AAAA;AAAA;AAAA;AAAA,YARJ,eAgCI;AAAA,kCACkBL,cADlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAhCJ,eAmCI;AAAQ,MAAA,IAAI,EAAC,QAAb;AACQ,MAAA,SAAS,EAAC,iBADlB;AAEQ,MAAA,OAAO,EAAE,MAAM;AACXG,QAAAA,SAAS,CAAC,IAAD,CAAT;AACH,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnCJ;AAAA,kBADJ;AA4CH,CArED;;GAAML,sB;;KAAAA,sB;AAuEN,eAAeA,sBAAf","sourcesContent":["import React,{useState} from \"react\";\n\nconst MultipleChoiceQuestion = ({question}) => {\n\n    const [selectedAnswer, setSelectedAnswer] = useState([])\n    const [graded, setGraded] = useState(false)\n\n    const getBackgroundColor = (choice) => {\n        if (choice === question.correct){\n            return \"list-group-item-success\"\n        } else if (choice === selectedAnswer) {\n            return \"list-group-item-danger\"\n        } else {\n            return \"\"\n        }\n    }\n\n    const getIcon = (choice) => {\n        if (choice === question.correct){\n            return \"fas fa-check\"\n        } else if (choice === selectedAnswer) {\n            return \"fas fa-times\"\n        } else {\n            return \"\"\n        }\n    }\n\n    return(\n        <>\n            <h3>\n                {question.title}\n                {\n                    graded === true &&\n                        <i className={`float-right ${selectedAnswer === question.correct? 'fas fa-check bg-danger': 'fas fa-times'}`}/>\n                }\n            </h3>\n            <ul className=\"list-group\">\n            {\n                question.choices.map((choice) => {\n                    return(\n                        <li className={`list-group-item ${graded === true? getBackgroundColor(choice): ''}`}>\n                            <label><input type=\"radio\" name={question._id} value={choice}\n\n                                          onClick={() => {\n                                            if (graded === false){\n                                                setSelectedAnswer(choice)\n                                            }\n                            }}/>{choice}</label>\n                            {\n                                graded === true &&\n\n                                <i className={`float-right ${getIcon(choice)}`}/>\n\n\n                            }\n                        </li>\n                    )\n                })\n            }\n            </ul>\n            <p>\n                Your answer: {selectedAnswer}\n            </p>\n            <button type=\"button\"\n                    className=\"btn btn-success\"\n                    onClick={() => {\n                        setGraded(true)\n                    }}\n            >Grade</button>\n        </>\n    )\n}\n\nexport default MultipleChoiceQuestion"]},"metadata":{},"sourceType":"module"}